<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:aop="http://www.springframework.org/schema/aop"
    xmlns:tx="http://www.springframework.org/schema/tx"
    xmlns:context="http://www.springframework.org/schema/context"
    xsi:schemaLocation="
   http://www.springframework.org/schema/beans
   http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
   http://www.springframework.org/schema/aop
   http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
   http://www.springframework.org/schema/tx
   http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
   http://www.springframework.org/schema/context     
   http://www.springframework.org/schema/context/spring-context-3.0.xsd">
  
  
  	<context:annotation-config />
    <context:component-scan base-package="com.yfli.ssh" />
    <tx:annotation-driven transaction-manager="transactionManager"/>
  	
   <!--  <bean name="productActionBean" scope="prototype" class="com.yfli.ssh.action.ProductAction">
        <property name="productService" ref="productServiceImpl" />
    </bean>
     
    <bean name="productServiceImpl" class="com.yfli.ssh.service.impl.ProductServiceImpl">
        <property name="productDAO" ref="productDAOImpl" />
    </bean>
    <bean name="productDAOImpl" class="com.yfli.ssh.dao.impl.ProductDAOImpl">
        <property name="sessionFactory" ref="sf" />
    </bean> -->
 	<!-- 注解方式 -->
    <bean name="sf" 
    	class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
        <!-- 配置文件方式使用 class="org.springframework.orm.hibernate3.LocalSessionFactoryBean" -->
        <property name="dataSource" ref="ds" />
        <!-- 使用文件配置方式 -->
        <!-- <property name="mappingResources">
            <list>
                <value>com/yfli/ssh/pojo/hbm.xml</value>
            </list>
        </property> -->
        
        <!-- 使用注解扫描 -->
        <property name="packagesToScan">
            <list>
                <value>com.yfli.ssh.*</value>
            </list>
        </property>
        
  		<!-- 但是有的时候，会失效，不能够自动生成表结构。
			需要在sessionfactory中加这么一句：
		 -->
        <property name="schemaUpdate"> 
            <value>true</value> 
        </property> 
        <!-- 其中hbm2ddl.auto=update就表示是自动更新表结构，不需要手段创建的变更。 -->
        <property name="hibernateProperties">
            <value>
                hibernate.dialect=org.hibernate.dialect.MySQLDialect
                hibernate.show_sql=true
                hbm2ddl.auto=update
            </value>
        </property>
    </bean>   
         
    <bean name="ds"
        class="org.springframework.jdbc.datasource.DriverManagerDataSource">
        <property name="driverClassName" value="com.mysql.jdbc.Driver" />
        <property name="url" value="jdbc:mysql://localhost:3306/ssh?characterEncoding=UTF-8" />
        <property name="username" value="root" />
        <property name="password" value="lyf910309" />
    </bean>
    <!-- SSH的配置事务管理是非侵入式的，所谓的非侵入式，就是指不需要修改一行java代码，只需要进行applicationContext.xml的配置，即可达到事务管理的效果。
		1. 增加一个专门进行事务管理的bean
		 
			<tx:advice id="txadvice" transaction-manager="transactionManager">  
			    <tx:attributes>  
			        <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />  
		          	<tx:method name="del*" propagation="REQUIRED" rollback-for="Exception"/>
					<tx:method name="edit*" propagation="REQUIRED" rollback-for="Exception" />
			        <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/>  
			        <tx:method name="list*" propagation="REQUIRED" rollback-for="Exception"/>  
			    </tx:attributes>  
			</tx:advice> 
		 
		
		这里面的add*,del*等等，表示对于这些名词开头的方法，进行事务管理。
		2. 配置切面
		 
		<aop:config>  
		    <aop:pointcut id="serviceMethod" expression="execution(* com.how2java.service.*.*(..))"/>  
		    <aop:advisor pointcut-ref="serviceMethod" advice-ref="txadvice"/>  
		</aop:config>   
		 
		
		这里使用了AOP切面编程的配置手段，让前面配置的事务管理bean,去和业务方法编织在一起。
		哪些业务方法呢？
		 
		execution(* com.how2java.service.*.*(..))
		 
		
		* 返回任意类型
		com.how2java.service.* 包名以com.how2java.service 开头的类的任意方法
		(..) 任意的参数类型
		这样就达到了对ProductServiceImpl的list()方法，进行事务管理的效果  
	-->
    <!-- 配置事务管理器（声明式的事务） --> 
    <bean id="transactionManager" class="org.springframework.orm.hibernate3.HibernateTransactionManager"> 
        <property name="sessionFactory" ref="sf"></property> 
    </bean>
    
    <!-- 在配置事务管理中有这么一行配置信息：
 
		<tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" />  
		这个REQUIRED，就是Spring事务类型，除了这种，还有其他好几种，都列罗在下：
			REQUIRED-支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。
			SUPPORTS-支持当前事务，如果当前没有事务，就以非事务方式执行。
			MANDATORY-支持当前事务，如果当前没有事务，就抛出异常。
			REQUIRES_NEW-新建事务，如果当前存在事务，把当前事务挂起。
			NOT_SUPPORTED-以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。
			NEVER-以非事务方式执行，如果当前存在事务，则抛出异常。
			NESTED-如果当前存在事务，则在嵌套事务内执行。如果当前没有事务，则进行与REQUIRED类似的操作。 
	-->
    
    <!-- <tx:advice id="txadvice" transaction-manager="transactionManager"> 
        <tx:attributes> 
            <tx:method name="add*" propagation="REQUIRED" rollback-for="Exception" /> 
            <tx:method name="del*" propagation="REQUIRED" rollback-for="Exception"/>
            <tx:method name="edit*" propagation="REQUIRED" rollback-for="Exception" />
            <tx:method name="update*" propagation="REQUIRED" rollback-for="Exception"/> 
            <tx:method name="list*" propagation="REQUIRED" rollback-for="Exception"/> 
        </tx:attributes> 
    </tx:advice> 
       
    <aop:config> 
        <aop:pointcut id="serviceMethod" expression="execution(* com.yfli.ssh.service.*.*(..))"/> 
        <aop:advisor pointcut-ref="serviceMethod" advice-ref="txadvice"/> 
    </aop:config> -->
    
      
</beans>